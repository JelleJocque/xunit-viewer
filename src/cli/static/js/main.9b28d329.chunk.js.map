{"version":3,"sources":["app/logo.js","app/hero.js","app/parse.js","app/parse-all.js","app/toggle.js","app/properties-options.js","app/reducer.js","app/suite.js","app/suite-options.js","app/test-options.js","app/app.js","index.js","cli/parse.js"],"names":["Logo","className","width","height","viewBox","fill","xmlns","d","fillRule","clipRule","FilterIcon","Hero","active","onClick","title","brand","alt","src","require","parse","window","dispatch","files","suites","a","file","contents","parsed","merge","recursive","console","log","message","type","payload","Toggle","onIcon","offIcon","onLabel","offLabel","disabled","onChange","Search","label","evt","value","target","placeholder","Total","count","total","EyeIcon","EyeSlashIcon","ChevronUpIcon","ChevronDownIcon","ToggleRow","propertiesVisible","propertiesExpanded","PropertiesOptions","all","tests","toggleAllProperties","state","update","toggleType","suiteTesttoggleType","Object","values","currentSuites","forEach","suite","properties","test","keys","length","name","id","fuzzy","toLowerCase","suitesExpanded","some","messages","visible","raw","entries","filter","key","concat","_active","_visible","suitesEmpty","menuActive","suiteOptionsActive","testOptionsActive","propertiesOptionsActive","activeFiles","testToggles","status","passed","failure","error","skipped","unknown","expanded","prop","icons","Properties","map","join","RawContent","index","PrettyContent","dangerouslySetInnerHTML","__html","PrettyIcon","CodeIcon","Test","time","classname","hasProperties","hasMessage","aria-hidden","SuiteCount","Suite","systemOut","hasTests","containsSomething","HideIcon","ShowIcon","SuiteOptions","icon","fromTestCounts","testCounts","StatusTotal","Options","App","useReducer","reducer","initialState","parseAll","currentPropertiesCount","propertiesTotal","testCount","testTotal","onUpdate","sockets","useEffect","io","on","sort","left","right","LZUTF8","decompress","inputEncoding","ReactDOM","render","document","getElementById","xml2js","statusRank","parseString","xml","Promise","resolve","reject","err","result","Error","hashCode","str","hash","i","charCodeAt","extractProperties","property","trim","push","meta","$","_","extractTests","output","testcases","testcase","class","clonedMeta","assign","leftStatus","indexOf","rightStatus","body","is_","is$Message","is$Type","isString","extractTestMessages","testsuite","extractSuite","testsuites","Array","isArray","includes","extarctSuiteMeta","extractSystemOut","extract","module","exports"],"mappings":"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","file":"static/js/main.9b28d329.chunk.js","sourcesContent":["import React from 'react'\n\nconst Logo = () => <svg className='logo' width='64' height='64' viewBox='0 0 64 64' fill='none' xmlns='http://www.w3.org/2000/svg'>\n  <rect width='64' height='64' fill='#2C3E50' />\n  <path d='M19.0625 28.9688L24.5156 20.25H28.0469L20.8594 31.5312L28.2188 43H24.6562L19.0625 34.125L13.4375 43H9.89062L17.2656 31.5312L10.0625 20.25H13.5781L19.0625 28.9688Z' fill='#0DBF1F' />\n  <path d='M42.4344 39.0156L48.9344 20.25H52.2156L43.7781 43H41.1219L32.7 20.25H35.9656L42.4344 39.0156Z' fill='#B32010' />\n  <path fillRule='evenodd' clipRule='evenodd' d='M0 64L4 60V4H60L64 0H4H0V4V64Z' fill='#0DBF1F' />\n  <path fillRule='evenodd' clipRule='evenodd' d='M0 64H60H64V60V0L60 4V60H4L0 64Z' fill='#B32010' />\n</svg>\n\nexport default Logo\n","import React from 'react'\nimport Logo from './logo'\n\nconst FilterIcon = () => <i className='fas fa-filter' />\n\nconst Hero = ({ active, onClick, title, brand }) => <section className='hero is-black'>\n  <div className='container'>\n    <div className='columns is-mobile'>\n      <div className='column is-1'>\n        <button className='filter button has-text-white' onClick={onClick}>\n          <span><FilterIcon /> {!active ? 'FILTER' : 'CLOSE'}</span>\n        </button>\n      </div>\n      <div className='column is-11'>\n        <div className='hero-center'>\n          {\n            brand !== null\n              ? <img className='brand' alt={title} src={brand} />\n              : <Logo />\n          }\n          <h1 className='title'>{title}</h1>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n\nexport default Hero\n","require('../cli/parse')\nconst parse = window.parse\nexport default parse\n","import merge from 'merge'\nimport parse from './parse'\n\nexport default async (dispatch, files, suites) => {\n  for (const { file, contents } of files) {\n    try {\n      const parsed = await parse(contents)\n      suites = merge.recursive(true, suites, parsed)\n    } catch (err) {\n      console.log('Failed to parse', file, '\\n', err.message)\n    }\n  }\n  dispatch({\n    type: 'parse-suites',\n    payload: {\n      suites: suites.suites\n    }\n  })\n}\n","import React from 'react'\n\nconst Toggle = ({\n  active,\n  onIcon,\n  offIcon,\n  onLabel,\n  offLabel,\n  disabled = false,\n  onChange = () => {},\n  className = ''\n}) => {\n  return <button\n    onClick={() => {\n      onChange(!active)\n    }}\n    disabled={disabled}\n    className={`button toggle is-${active ? 'active' : 'inactive'} ${className}`}>\n    <div className='toggle-rail'>\n      <div className='toggle-handle' />\n    </div>\n    {active ? onIcon : offIcon}\n    <span>{active ? onLabel : offLabel}</span>\n  </button>\n}\n\nexport default Toggle\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst Search = ({ label, dispatch }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-properties',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total }) => <div className='options-total'>\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst EyeIcon = () => <span className='icon'>\n  <i className='fas fa-eye' />\n</span>\n\nconst EyeSlashIcon = () => <span className='icon'>\n  <i className='fas fa-eye-slash' />\n</span>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst ToggleRow = ({ type, label, propertiesVisible, propertiesExpanded, dispatch }) => <div>\n  <div className='properties-options-toggle-label'>\n    <span>{label}</span>\n  </div>\n  <Toggle\n    className='properties-options-toggle'\n    active={propertiesVisible[type]}\n    onChange={() => {\n      dispatch({\n        type: 'toggle-properties-visbility',\n        payload: {\n          type,\n          active: !propertiesVisible[type]\n        }\n      })\n    }}\n    onLabel='Visible'\n    offLabel='Hidden'\n    onIcon={<EyeIcon />}\n    offIcon={<EyeSlashIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-all-properties',\n        payload: {\n          type,\n          active: !propertiesExpanded[type]\n        }\n      })\n    }}\n    className='properties-options-toggle'\n    active={propertiesExpanded[type]}\n    onLabel='Expanded'\n    offLabel='Contracted'\n    offIcon={<ChevronUpIcon />}\n    onIcon={<ChevronDownIcon />} />\n</div>\n\nconst PropertiesOptions = ({ count = 0, total = 0, active = false, dispatch, propertiesExpanded = { all: true, suites: true, tests: true }, propertiesVisible = { all: true, suites: true, tests: true } }) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Properties' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-properties-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content'>\n      {active\n        ? <div>\n          <ToggleRow type='all' label='All' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n          <ToggleRow type='suites' label='Suites' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n          <ToggleRow type='tests' label='Tests' propertiesVisible={propertiesVisible} propertiesExpanded={propertiesExpanded} dispatch={dispatch} />\n        </div>\n        : null}\n    </div>\n\n  </div>\n}\n\nexport default PropertiesOptions\n","import fuzzy from 'fuzzy'\nimport merge from 'merge'\n\nconst toggleAllProperties = (state, payload, update, toggleType, suiteTesttoggleType) => {\n  update[toggleType] = state[toggleType]\n  update[toggleType][payload.type] = payload.active\n\n  if (payload.type === 'all') {\n    update[toggleType].suites = payload.active\n    update[toggleType].tests = payload.active\n  }\n\n  if (payload.type === 'all' || payload.type === 'suites') {\n    Object.values(update.currentSuites).forEach(suite => {\n      suite.properties[suiteTesttoggleType] = payload.active\n    })\n  }\n\n  if (payload.type === 'all' || payload.type === 'tests') {\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if ('properties' in test) {\n          test.properties[suiteTesttoggleType] = payload.active\n        }\n      })\n    })\n  }\n  return update\n}\n\nexport default (state, { type, payload }) => {\n  let update = {}\n  update.currentSuites = state.currentSuites\n\n  if (type === 'parse-suites') {\n    state = merge.recursive(true, {}, state)\n    state.suites = payload.suites\n    state.currentSuites = payload.suites\n    Object.values(state.currentSuites).forEach(suite => {\n      if (Object.keys(suite.tests).length > 0 || Object.keys(suite.properties).length > 0) suite.active = true\n    })\n    return state\n  }\n\n  if (type === 'search-suites') {\n    Object.values(state.suites).forEach(({ name, id }) => {\n      if (fuzzy.test(payload.value.toLowerCase(), name.toLowerCase())) {\n        update.currentSuites[id] = update.currentSuites[id] || merge.recursive(true, {}, state.suites[id])\n        if (!('active' in update.currentSuites[id])) update.currentSuites[id].active = true\n      } else delete update.currentSuites[id]\n    })\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n  if (type === 'search-tests') {\n    Object.values(state.suites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (!fuzzy.test(payload.value.toLowerCase(), test.name.toLowerCase()) && !test.messages.some(message => fuzzy.test(payload.value.toLowerCase(), message.toLowerCase()))) {\n          if (update.currentSuites[suite.id]) delete update.currentSuites[suite.id].tests[test.id]\n        } else if (suite.id in update.currentSuites && !(test.id in update.currentSuites[suite.id].tests)) {\n          if (update.currentSuites[suite.id]) {\n            update.currentSuites[suite.id].tests[test.id] = merge.recursive(true, {}, state.suites[suite.id].tests[test.id])\n            update.currentSuites[suite.id].tests[test.id].active = true\n            update.currentSuites[suite.id].tests[test.id].visible = true\n            update.currentSuites[suite.id].tests[test.id].raw = true\n          }\n        }\n      })\n    })\n  }\n  if (type === 'search-properties') {\n    Object.values(state.suites).forEach(suite => {\n      Object.entries(suite.properties)\n        .filter(([key]) => key !== '_visible' && key !== '_active')\n        .forEach(([key, values]) => {\n          values = values || []\n          if (!fuzzy.test(payload.value.toLowerCase(), key.toLowerCase()) && !values.some(value => fuzzy.test(payload.value.toLowerCase(), value.toLowerCase()))) delete update.currentSuites[suite.id].properties[key]\n          else if (suite.id in update.currentSuites && !(key in update.currentSuites[suite.id].properties)) {\n            if (update.currentSuites[suite.id]) {\n              update.currentSuites[suite.id].properties[key] = [].concat(state.suites[suite.id].properties[key])\n              update.currentSuites[suite.id].properties._active = true\n              update.currentSuites[suite.id].properties._visible = true\n              update.propertiesExpanded = false\n            }\n          }\n        })\n    })\n    update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._active || false\n    })\n    update.propertiesVisible = Object.values(update.currentSuites).some((suite) => {\n      return suite.properties._visible || false\n    })\n  }\n\n  if (type === 'toggle-all-suites') {\n    update.suitesExpanded = !state.suitesExpanded\n    Object.values(update.currentSuites).forEach(suite => { suite.active = update.suitesExpanded })\n  }\n  if (type === 'toggle-empty-suites') {\n    update.suitesEmpty = !state.suitesEmpty\n  }\n  if (type === 'toggle-menu') update.menuActive = !state.menuActive\n  if (type === 'toggle-suite-options') update.suiteOptionsActive = !state.suiteOptionsActive\n  if (type === 'toggle-test-options') update.testOptionsActive = !state.testOptionsActive\n  if (type === 'toggle-properties-options') update.propertiesOptionsActive = !state.propertiesOptionsActive\n  if (type === 'toggle-files') update.activeFiles = !state.activeFiles\n  if (type === 'toggle-suite') {\n    update.currentSuites[payload.id].active = payload.active\n    update.suitesExpanded = Object.values(update.currentSuites).some(suite => suite.active === true)\n  }\n\n  if (type === 'toggle-properties') {\n    if (typeof payload.test !== 'undefined' && payload.test !== null) {\n      update.currentSuites[payload.suite].tests[payload.test].properties._active = payload.active\n    } else {\n      update.currentSuites[payload.suite].properties._active = payload.active\n      update.propertiesExpanded = Object.values(update.currentSuites).some((suite) => {\n        return suite.properties._active || false\n      })\n    }\n  }\n\n  if (type === 'toggle-all-properties') {\n    update = toggleAllProperties(state, payload, update, 'propertiesExpanded', '_active')\n  }\n  if (type === 'toggle-properties-visbility') {\n    update = toggleAllProperties(state, payload, update, 'propertiesVisible', '_visible')\n  }\n\n  if (type === 'toggle-test') {\n    update.currentSuites[payload.suite].tests[payload.id].active = payload.active\n  }\n  if (type === 'toggle-test-mode') {\n    update.currentSuites[payload.suite].tests[payload.id].raw = payload.raw\n  }\n  if (type === 'toggle-test-visibility') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].visible = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.visible = payload.active\n        else if (payload.status === test.status) test.visible = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.visible = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.visible = payload.active\n      update.testToggles.failure.visible = payload.active\n      update.testToggles.error.visible = payload.active\n      update.testToggles.skipped.visible = payload.active\n      update.testToggles.unknown.visible = payload.active\n    } else {\n      if (update.testToggles.passed.visible ||\n            update.testToggles.failure.visible ||\n            update.testToggles.error.visible ||\n            update.testToggles.skipped.visible ||\n            update.testToggles.unknown.visible) update.testToggles.all.visible = true\n    }\n  }\n  if (type === 'toggle-test-expanded') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].expanded = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.active = payload.active\n        else if (payload.status === test.status) test.active = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.active = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.expanded = payload.active\n      update.testToggles.failure.expanded = payload.active\n      update.testToggles.error.expanded = payload.active\n      update.testToggles.skipped.expanded = payload.active\n      update.testToggles.unknown.expanded = payload.active\n    } else {\n      if (update.testToggles.passed.expanded ||\n            update.testToggles.failure.expanded ||\n            update.testToggles.error.expanded ||\n            update.testToggles.skipped.expanded ||\n            update.testToggles.unknown.expanded) update.testToggles.all.expanded = true\n    }\n  }\n  if (type === 'toggle-test-raw') {\n    update.testToggles = state.testToggles\n    update.testToggles[payload.status].raw = payload.active\n\n    Object.values(update.currentSuites).forEach(suite => {\n      Object.values(suite.tests).forEach(test => {\n        if (payload.status === 'all') test.raw = payload.active\n        else if (payload.status === test.status) test.raw = payload.active\n        else if (typeof test.status === 'undefined' && payload.status === 'unknown') test.raw = payload.active\n      })\n    })\n\n    if (payload.status === 'all') {\n      update.testToggles.passed.raw = payload.active\n      update.testToggles.failure.raw = payload.active\n      update.testToggles.error.raw = payload.active\n      update.testToggles.skipped.raw = payload.active\n      update.testToggles.unknown.raw = payload.active\n    } else {\n      if (update.testToggles.passed.raw ||\n            update.testToggles.failure.raw ||\n            update.testToggles.error.raw ||\n            update.testToggles.skipped.raw ||\n            update.testToggles.unknown.raw) update.testToggles.all.raw = true\n    }\n  }\n\n  state = merge.recursive(true, state, update)\n\n  Object.values(state.currentSuites).forEach(suite => {\n    if (!state.suitesEmpty) suite._visible = true\n    else suite._visible = (Object.keys(suite.tests).length > 0 && Object.values(suite.tests).filter(test => test.visible).length > 0) || (suite.properties._visible && Object.keys(suite.properties).filter(prop => prop !== '_visible').length > 0)\n  })\n\n  return state\n}\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst Properties = ({ properties, active = true, dispatch, suite, test = null }) => {\n  return <div className={`properties card is-${active ? 'active' : 'inactive'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-properties', payload: { suite, test, active: !active } }) }}>\n      <p className='card-header-title'>Properties</p>\n      <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span>\n    </button>\n    {active\n      ? <div className='card-content'>\n      <table className='table'>\n        <thead>\n          <tr>\n            <th>Property</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(properties)\n            .filter(key => key !== '_active' && key !== '_visible')\n            .map(key => {\n              return <tr key={key}>\n                <td>{key}</td>\n                <td>{properties[key].join(', ')}</td>\n              </tr>\n            })}\n        </tbody>\n      </table>\n    </div>\n      : null}\n  </div>\n}\n\nconst RawContent = ({ messages }) => <div className='raw-content'>\n  {messages.map((message, index) => <pre key={`test-message-${index}`}>{message}</pre>)}\n</div>\n\nconst PrettyContent = ({ messages }) => <div className='pretty-content'>\n  {messages.map((message, index) => <div key={`test-message-${index}`} dangerouslySetInnerHTML={{ __html: message }} />)}\n</div>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst Test = ({ id, messages, status, time, classname, name, properties = {}, active = true, raw = true, dispatch, suite }) => {\n  const hasProperties = properties._visible & Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const hasMessage = messages.length > 0\n  return <div className={`test card is-${active ? 'active' : 'inactive'} is-${status} is-${!hasMessage && !hasProperties ? 'empty' : 'populated'}`}>\n    <button className='card-header' onClick={() => { dispatch({ type: 'toggle-test', payload: { suite, id, active: !active } }) }} disabled={!hasMessage && !hasProperties}>\n      <p className='card-header-title'>\n        <span className='icon'>\n          <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n        </span>\n        <span>{name}</span>\n        {classname ? <small>classname = {classname}</small> : null}\n        {time ? <small>time = {time}</small> : null}\n      </p>\n      {hasMessage || hasProperties\n        ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span>\n        : null}\n    </button>\n    <div className='content'>\n      {active && (hasMessage || hasProperties)\n        ? <div className='card-content'>\n        {hasProperties ? <Properties properties={properties} suite={suite} test={id} dispatch={dispatch} active={properties._active} /> : null}\n        {\n          hasMessage\n            ? <>\n              <Toggle\n                active={raw}\n                onLabel='raw'\n                onIcon={<CodeIcon />}\n                offIcon={<PrettyIcon />}\n                offLabel='pretty'\n                onChange={() => dispatch({ type: 'toggle-test-mode', payload: { suite, id, raw: !raw } })} />\n              {\n                raw\n                  ? <RawContent messages={messages} />\n                  : <PrettyContent messages={messages} />\n              }\n            </>\n            : null\n        }\n      </div>\n        : null}\n    </div>\n  </div>\n}\n\nconst SuiteCount = ({ count, type }) => count > 0\n  ? <span className='suite-count'>\n  <span className='icon'>\n    <i className={`fas fa-${icons[type]}`} aria-hidden='true' />\n  </span>\n  {count}\n</span>\n  : null\n\nconst Suite = ({ visible, id, name, active = false, properties = {}, time, tests = {}, dispatch, systemOut = [] }) => {\n  let passed = 0\n  let failure = 0\n  let skipped = 0\n  let error = 0\n  let unknown = 0\n  Object.keys(tests).forEach(key => {\n    const status = tests[key].status\n    if (status === 'passed') passed += 1\n    else if (status === 'failure') failure += 1\n    else if (status === 'skipped') skipped += 1\n    else if (status === 'error') error += 1\n    else unknown += 1\n  })\n\n  const hasTests = Object.keys(tests).length > 0 && Object.values(tests).some(test => test.visible)\n  const hasProperties = '_visible' in properties && properties._visible && Object.keys(properties).filter(key => key !== '_active' && key !== '_visible').length > 0\n  const containsSomething = hasTests || hasProperties\n  return <div className={`card suite is-${active ? 'active' : 'inactive'} is-${containsSomething ? 'populated' : 'empty'} is-${visible ? 'visible' : 'hidden'}`}>\n    <button className='card-header' onClick={() => { if (containsSomething) dispatch({ type: 'toggle-suite', payload: { id, active: !active } }) }} disabled={!containsSomething}>\n      <p className='card-header-title'>\n        <span>{name}</span>\n        {time ? <small>time = {time}</small> : null}\n      </p>\n\n      {containsSomething\n        ? <span className='card-header-icon'>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </span>\n        : null}\n      {containsSomething\n        ? <p className='suite-count-container'>\n        <SuiteCount type='failure' count={failure} />\n        <SuiteCount type='error' count={error} />\n        <SuiteCount type='passed' count={passed} />\n        <SuiteCount type='skipped' count={skipped} />\n        <SuiteCount type='unknown' count={unknown} />\n      </p>\n        : null}\n    </button>\n    {active && containsSomething\n      ? <div className='card-content'>\n      <div className='content'>\n        {systemOut.length > 0 ? systemOut.map((value, index) => <pre key={`${id}-sysout-${index}`}>{value}</pre>) : null}\n        {hasProperties ? <Properties properties={properties} suite={id} dispatch={dispatch} active={properties._active} /> : null}\n        <div>\n          {\n            Object.entries(tests)\n              .filter(([key, test]) => test.visible)\n              .map(([key, test]) => <Test key={key} {...test} suite={id} dispatch={dispatch} />)\n          }\n        </div>\n      </div>\n    </div>\n      : null}\n  </div>\n}\n\nexport default Suite\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst Search = ({ label, dispatch }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-suites',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total }) => <div className='options-total'>\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst HideIcon = () => <span className='icon'>\n  <i className='far fa-eye-slash' />\n</span>\n\nconst ShowIcon = () => <span className='icon'>\n  <i className='far fa-eye' />\n</span>\n\nconst SuiteOptions = ({ suitesExpanded = true, suitesEmpty = true, count = 0, total = 0, dispatch, active = false }) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Suites' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-suite-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content options-toggles'>\n      {active\n        ? <>\n          <Toggle\n            onChange={() => dispatch({ type: 'toggle-all-suites' })}\n            active={suitesExpanded}\n            onLabel='Expanded'\n            offLabel='Contracted'\n            offIcon={<ChevronUpIcon />}\n            onIcon={<ChevronDownIcon />} />\n          <Toggle\n            onChange={() => dispatch({ type: 'toggle-empty-suites' })}\n            active={suitesEmpty}\n            onLabel='Empty hidden'\n            offLabel='Empty shown'\n            onIcon={<HideIcon />}\n            offIcon={<ShowIcon />} />\n        </>\n        : null}\n    </div>\n\n  </div>\n}\n\nexport default SuiteOptions\n","import React from 'react'\nimport Toggle from './toggle'\n\nconst icons = {\n  passed: 'check',\n  failure: 'times',\n  error: 'exclamation',\n  skipped: 'ban',\n  unknown: 'question'\n}\n\nconst Search = ({ label, dispatch, suite, id }) => <div className='field options-search'>\n  <div className='control'>\n    <input\n      onChange={(evt) => {\n        dispatch({\n          type: 'search-tests',\n          payload: {\n            value: evt.target.value\n          }\n        })\n      }}\n      className='input'\n      type='text'\n      placeholder={label} />\n  </div>\n</div>\n\nconst Total = ({ count, total, icon }) => <div className='options-total'>\n  {icon\n    ? <span className='icon'>\n      <i className={`fas fa-${icons[icon] || icons.unknown}`} aria-hidden='true' />\n    </span>\n    : null}\n  <b>{count}</b><span>/{total}</span>\n</div>\n\nconst fromTestCounts = (testCounts, status, value) => {\n  const statusCounts = testCounts[status] || {}\n  return statusCounts[value] || 0\n}\n\nconst EyeIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye' />\n  </span>\n</>\n\nconst EyeSlashIcon = () => <>\n  <span className='icon'>\n    <i className='fas fa-eye-slash' />\n  </span>\n</>\n\nconst PrettyIcon = () => <span className='icon'>\n  <i className='fas fa-star' />\n</span>\n\nconst CodeIcon = () => <span className='icon'>\n  <i className='fas fa-code' />\n</span>\n\nconst ChevronUpIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-up' />\n</span>\n\nconst ChevronDownIcon = () => <span className='icon'>\n  <i className='fas fa-chevron-down' />\n</span>\n\nconst StatusTotal = ({ testCounts, status }) => {\n  return fromTestCounts(testCounts, status, 'total') > 0 ? <Total count={fromTestCounts(testCounts, status, 'count')} total={fromTestCounts(testCounts, status, 'total')} icon={status} /> : null\n}\n\nconst ToggleRow = ({ status, label, dispatch, visible = true, expanded = true, raw = true }) => <div className='test-options-toggle-row'>\n  <div className='test-options-toggle-row-label'>\n    {status !== 'all'\n      ? <span className='icon'>\n        <i className={`fas fa-${icons[status] || icons.unknown}`} aria-hidden='true' />\n      </span>\n      : <span className='icon'>\n        <i className='far fa-circle' aria-hidden='true' />\n      </span>}\n    <span>{label}</span>\n  </div>\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-visibility',\n        payload: {\n          status,\n          active: !visible\n        }\n      })\n    }}\n    active={visible}\n    onLabel='Visible'\n    offLabel='Hidden'\n    onIcon={<EyeIcon />}\n    offIcon={<EyeSlashIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-expanded',\n        payload: {\n          status,\n          active: !expanded\n        }\n      })\n    }}\n    active={expanded}\n    onLabel='Expanded'\n    offLabel='Contracted'\n    onIcon={<ChevronDownIcon />}\n    offIcon={<ChevronUpIcon />} />\n  <Toggle\n    onChange={() => {\n      dispatch({\n        type: 'toggle-test-raw',\n        payload: {\n          status,\n          active: !raw\n        }\n      })\n    }}\n    active={raw}\n    onLabel='Raw'\n    offLabel='Pretty'\n    onIcon={<CodeIcon />}\n    offIcon={<PrettyIcon />} />\n\n</div>\n\nconst Options = ({\n  testCounts = {},\n  testToggles = {},\n  count = 0,\n  total = 0,\n  dispatch,\n  active = false\n}) => {\n  return <div className={`options card ${active ? 'is-active' : 'is-inactive'}`}>\n    <header className='card-header'>\n      <Search label='Tests' dispatch={dispatch} />\n      <button\n        onClick={() => dispatch({ type: 'toggle-test-options' })}\n        className='button card-header-icon'>\n        <div className='options-inputs'>\n          <Total count={count} total={total} />\n          <StatusTotal testCounts={testCounts} status='passed' />\n          <StatusTotal testCounts={testCounts} status='failure' />\n          <StatusTotal testCounts={testCounts} status='error' />\n          <StatusTotal testCounts={testCounts} status='skipped' />\n          <StatusTotal testCounts={testCounts} status='unknown' />\n        </div>\n        <span className='icon'>\n          <i className='fas fa-angle-down' />\n        </span>\n      </button>\n    </header>\n    <div className='card-content options-toggles'>\n      {active\n        ? <>\n          <ToggleRow status='all' label='All' dispatch={dispatch} {...testToggles.all} />\n          <ToggleRow status='passed' label='Passed' dispatch={dispatch} {...testToggles.passed} />\n          <ToggleRow status='failure' label='Failure' dispatch={dispatch} {...testToggles.failure} />\n          <ToggleRow status='error' label='Error' dispatch={dispatch} {...testToggles.error} />\n          <ToggleRow status='skipped' label='Skipped' dispatch={dispatch} {...testToggles.skipped} />\n          <ToggleRow status='unknown' label='Unknown' dispatch={dispatch} {...testToggles.unknown} />\n        </>\n        : null}\n    </div>\n\n  </div>\n}\n\nexport default Options\n","import React, { useEffect, useReducer } from 'react'\nimport Files from './files'\nimport Hero from './hero'\nimport initialState from './initial-state.json'\nimport parseAll from './parse-all'\nimport PropertiesOptions from './properties-options'\nimport reducer from './reducer'\nimport Suite from './suite'\nimport SuiteOptions from './suite-options'\nimport TestOptions from './test-options'\n\nconst App = ({ files, title, brand }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  if (Object.keys(state.suites).length === 0) parseAll(dispatch, files, {})\n\n  let currentPropertiesCount = 0\n  let propertiesTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    currentPropertiesCount += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) currentPropertiesCount += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    propertiesTotal += Object.keys(suite.properties).filter(key => key !== '_active' && key !== '_visible').length\n    Object.values(suite.tests).forEach(test => {\n      if (test.properties) propertiesTotal += Object.keys(test.properties).filter(key => key !== '_active' && key !== '_visible').length\n    })\n  })\n\n  const testCounts = {}\n  let testCount = 0\n  let testTotal = 0\n  Object.entries(state.currentSuites).forEach(([key, suite]) => {\n    Object.entries(suite.tests).forEach(([key, test]) => {\n      const status = test.status || 'unknown'\n      testCounts[status] = testCounts[status] || {}\n      testCounts[status].count = testCounts[status].count || 0\n      testCounts[status].total = testCounts[status].total || 0\n\n      testCounts[status].count += 1\n      testCounts[status].total += 1\n\n      testTotal += 1\n      testCount += 1\n    })\n  })\n\n  const onUpdate = ({ files }) => {\n    parseAll(dispatch, files, {})\n  }\n\n  window.sockets = window.sockets || null\n  useEffect(() => {\n    if (window.sockets === null && 'io' in window) {\n      window.sockets = window.io()\n      window.sockets.on('update', onUpdate)\n    }\n  })\n\n  return <div>\n    <Hero active={state.menuActive} onClick={() => { dispatch({ type: 'toggle-menu' }) }} title={title} brand={brand} />\n    <header className={`is-${!state.menuActive ? 'hidden' : 'shown'}`}>\n      <div className='container'>\n        <SuiteOptions\n          active={state.suiteOptionsActive}\n          suitesExpanded={state.suitesExpanded}\n          suitesEmpty={state.suitesEmpty}\n          dispatch={dispatch}\n          count={Object.keys(state.currentSuites).length}\n          total={Object.keys(state.suites).length}\n        />\n        <TestOptions\n          active={state.testOptionsActive}\n          testToggles={state.testToggles}\n          testCounts={testCounts}\n          count={testCount}\n          total={testTotal}\n          dispatch={dispatch}\n        />\n        <PropertiesOptions\n          propertiesExpanded={state.propertiesExpanded}\n          propertiesVisible={state.propertiesVisible}\n          active={state.propertiesOptionsActive}\n          count={currentPropertiesCount}\n          total={propertiesTotal}\n          dispatch={dispatch}\n        />\n        {process.env.NODE_ENV === 'development'\n          ? <Files files={files} active={state.activeFiles} setActive={() => { dispatch({ type: 'toggle-files' }) }} />\n          : null}\n      </div>\n    </header>\n    <main>\n      <div className='container'>\n        <div>\n          {\n            Object.values(state.currentSuites)\n              .sort((left, right) => {\n                if (left.name < right.name) return -1\n                if (left.name > right.name) return 1\n                return 0\n              })\n              .map(suite => <Suite key={suite.id} {...suite} visible={suite._visible} dispatch={dispatch} />)\n          }\n        </div>\n      </div>\n    </main>\n  </div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport '@fortawesome/fontawesome-free/js/all'\n\nimport './app/index.css'\nimport App from './app/app.js'\n\nimport LZUTF8 from 'lzutf8'\n\nlet files = window.files || []\nconst title = window.title || 'Xunit Viewer'\nconst brand = window.brand || null\n\nif (process.env.NODE_ENV === 'development') {\n  files = [{\n    file: '/path/to/file/complete.xml',\n    contents: LZUTF8.compress(`\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuite tests=\"1\" failures=\"1\" time=\"0.0160106\">\n  <testcase name=\"It Is A Failure\" classname=\"Failing\" time=\"0.012011200000000001\">\n    <error>Error message</error>\n    <system-out>Some messgae</system-out>\n    <failure type=\"Failure\">FILENAME:XX</failure>\n  </testcase>\n</testsuite>\n`, { outputEncoding: 'Base64' })\n  }]\n}\n\nfiles = files.map(({ file, contents }) => ({\n  file,\n  contents: LZUTF8.decompress(contents, { inputEncoding: 'Base64' })\n}))\n\nReactDOM.render(<App files={files} title={title} brand={brand} />, document.getElementById('root'))\n","const xml2js = require('xml2js')\n\nconst statusRank = [\n  'failure',\n  'error',\n  'passed',\n  'skipped',\n  'unknown'\n]\n\nconst parseString = (xml) => new Promise((resolve, reject) => {\n  xml2js.parseString(xml, (err, result) => {\n    if (err) reject(new Error(err))\n    else resolve(result)\n  })\n})\n\nconst hashCode = (str) => {\n  let hash = 0\n  if (str.length === 0) return hash\n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i)\n    hash = ((hash << 5) - hash) + char\n    hash = hash & hash\n  }\n  return hash\n}\n\nconst extarctSuiteMeta = (output, testsuite) => {\n  const meta = testsuite.$ || {}\n  const name = meta.name || 'No Name'\n  const id = hashCode(name)\n  const suite = output.suites[id] || {}\n  suite.tests = suite.tests || {}\n  suite.systemOut = suite.systemOut || []\n  suite.properties = suite.properties || {\n    _visible: true\n  }\n\n  Object.entries(meta).forEach(([key, value]) => {\n    if (!['errors', 'failures', 'name', 'skipped', 'tests', 'time'].includes(key)) {\n      suite.properties[key] = suite.properties[key] || []\n      suite.properties[key].push(value)\n    }\n  })\n\n  suite.id = id\n  suite.name = name\n  suite.time = meta.time || 0\n  return suite\n}\n\nconst extractProperties = (suite, properties) => {\n  suite.properties = suite.properties || {}\n  suite.properties._visible = true\n  properties.forEach(property => {\n    if (typeof property === 'string') {\n      property = property.trim()\n      if (property !== '') {\n        suite.properties['No Name'] = suite.properties['No Name'] || []\n        suite.properties['No Name'].push(property)\n      }\n    } else {\n      property.property.forEach(property => {\n        const meta = property.$ || {}\n        const name = meta.name || 'No Name'\n        let value = meta.value || property._\n        if (typeof property === 'string') value = property\n        value = value || ''\n        value = value.trim()\n        suite.properties[name] = suite.properties[name] || []\n        if (value) {\n          suite.properties[name].push(value)\n        }\n      })\n    }\n  })\n}\n\nconst extractTestMessages = (test, messages) => {\n  messages.forEach(body => {\n    const is_ = typeof body._ === 'string'\n    const is$Message = typeof body.$ !== 'undefined' && ('message' in body.$)\n    const is$Type = typeof body.$ !== 'undefined' && ('type' in body.$)\n    const isString = typeof body === 'string'\n\n    if (is_) test.messages.push(body._.trim())\n    if (is$Message) test.messages.push(body.$.message.trim())\n    if (is$Type) test.messages.push(body.$.type.trim())\n    if (isString) test.messages.push(body.trim())\n  })\n}\n\nconst extractTests = (output, suite, testcases) => {\n  suite.tests = suite.tests || {}\n  testcases.forEach(testcase => {\n    const meta = testcase.$ || {}\n    const name = meta.name || 'No Name'\n    const classname = meta.classname || meta.class || ''\n    const time = meta.time || 0\n    const id = hashCode(name + classname)\n\n    const test = suite.tests[id] || { id, name, messages: [], visible: true }\n    test.time = time\n    test.classname = classname\n    if (typeof testcase === 'string') test.messages.push(testcase.trim())\n    if (testcase._) test.messages.push(testcase._.trim())\n    if (meta.message) test.messages.push(testcase.$.message.trim())\n    if (typeof testcase.properties !== 'undefined') {\n      extractProperties(test, testcase.properties)\n      delete testcase.properties\n    }\n    const clonedMeta = Object.assign({}, meta)\n    delete clonedMeta.time\n    delete clonedMeta.name\n    delete clonedMeta.classname\n    delete clonedMeta.class\n    delete clonedMeta.message\n    if (Object.keys(clonedMeta).length > 0) {\n      const property = []\n      for (const [name, value] of Object.entries(clonedMeta)) {\n        property.push({\n          $: {\n            name, value\n          }\n        })\n      }\n      extractProperties(test, [{ property }])\n    }\n\n    if (typeof testcase !== 'string') {\n      const keys = Object.keys(testcase).filter(key => key !== '$' && key !== '_' && key !== 'testcase')\n        .sort((left, right) => {\n          let leftStatus = statusRank.indexOf(left)\n          let rightStatus = statusRank.indexOf(right)\n          leftStatus = leftStatus === -1 ? statusRank.length : leftStatus\n          rightStatus = rightStatus === -1 ? statusRank.length : rightStatus\n\n          if (leftStatus < rightStatus) return -1\n          if (leftStatus > rightStatus) return 1\n          return 0\n        })\n      let status = keys[0]\n      keys.forEach((key) => {\n        if (key) extractTestMessages(test, testcase[key])\n      })\n      if (status === 'system-out') status = 'passed'\n      test.status = status || 'passed'\n    }\n\n    test.messages = test.messages.filter(message => message !== '')\n\n    suite.tests[id] = test\n    if (typeof testcase.testcase !== 'undefined') extractTests(output, suite, testcase.testcase)\n    if (typeof testcase.testsuite !== 'undefined') extractSuite(output, testcase.testsuite)\n  })\n}\n\nconst extractSystemOut = (suite, testsuite) => {\n  suite.systemOut = suite.systemOut || []\n  let systemOut = testsuite['system-out']\n  if (!Array.isArray(systemOut)) systemOut = [systemOut]\n  suite.systemOut = suite.systemOut.concat(systemOut)\n}\n\nconst extractSuite = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    const suite = extarctSuiteMeta(output, testsuite)\n    if (typeof testsuite.properties !== 'undefined') extractProperties(suite, testsuite.properties)\n    if (typeof testsuite.testcase !== 'undefined') extractTests(output, suite, testsuite.testcase)\n    if (typeof testsuite['system-out'] !== 'undefined') extractSystemOut(suite, testsuite)\n    output.suites[suite.id] = suite\n  })\n}\n\nconst extract = (output, testsuites) => {\n  if (!Array.isArray(testsuites)) testsuites = [testsuites]\n  testsuites.forEach(testsuite => {\n    extractSuite(output, testsuite)\n    if (typeof testsuite.testsuite !== 'undefined') extract(output, testsuite.testsuite)\n  })\n}\n\nconst parse = async (xml) => {\n  const output = {\n    suites: {}\n  }\n  const result = await parseString(xml)\n  if (result.testsuites) {\n    const testsuites = result.testsuites.testsuite\n    extract(output, testsuites)\n  } else if (result.testsuite) {\n    extract(output, result.testsuite)\n  }\n\n  for (const value of Object.values(output.suites)) {\n    value._visible = Object.keys(value.tests).length > 0 || Object.keys(value.properties).filter(prop => prop !== '_visible').length > 0\n    value.systemOut = value.systemOut.map(value => value.trim())\n  }\n  return output\n}\n\nif (typeof window !== 'undefined') window.parse = parse\nelse {\n  module.exports = parse\n}\n"],"sourceRoot":""}